name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=long
      
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Make image public
        if: github.event_name != 'pull_request'
        run: |
          echo "Making container image public..."
          
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
          
          # Extract image name without registry
          IMAGE="${{ env.IMAGE_NAME }}"
          IMAGE_WITHOUT_OWNER=$(echo $IMAGE | cut -d '/' -f 2)
          
          # Get all tags that were just pushed
          for TAG in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Processing tag: $TAG"
            # Extract package version from tag
            VERSION=$(echo $TAG | awk -F: '{print $2}')
            
            # Make the package public using GitHub CLI
            echo "Setting package visibility to public for version $VERSION"
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              "/user/packages/container/${IMAGE_WITHOUT_OWNER}/versions/${VERSION}" \
              -f visibility='public'
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-helm-chart:
    name: Update Helm Chart
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
      
      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Update Helm chart version
        run: |
          # Update Chart.yaml with new version
          sed -i "s/version:.*/version: ${{ steps.get_version.outputs.VERSION }}/g" helm/Chart.yaml
          sed -i "s/appVersion:.*/appVersion: ${{ steps.get_version.outputs.VERSION }}/g" helm/Chart.yaml
          
          # Update values.yaml with new image tag
          sed -i "s/tag:.*/tag: ${{ steps.get_version.outputs.VERSION }}/g" helm/values.yaml
      
      - name: Package Helm chart
        run: |
          helm package helm -d helm/dist
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "helm/dist/*.tgz"
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
